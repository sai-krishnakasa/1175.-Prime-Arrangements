Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)

(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)

Since the answer may be large, return the answer modulo 10^9 + 7.
Example 1:

Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.
Example 2:

Input: n = 100
Output: 682289015

  SOLUTION:
import math
class Solution:
    def numPrimeArrangements(self, n: int) -> int:
        primes=[1]*(n+1)
        primes[0]=False
        primes[1]=False
        p=2
        arr=0
        while(p*p<=n):
            if primes[p]:
                for i in range(p*p,n+1,p):
                    primes[i]=False
            p+=1
        c=0
        for i in range(len(primes)):
            if primes[i]:
                c+=1
        non_prime=n-c
        arr=math.factorial(c)*math.factorial(non_prime)
        return arr%1000000007
